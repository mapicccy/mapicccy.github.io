<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20220801一个奇怪的梦</title>
    <url>/posts/9ff025e4/</url>
    <content><![CDATA[<p>做梦我也被公司干掉了，不像其他人收到HRG正式谈话通知，只有小智（化名）口头说他记得也有我。</p>
<p>一开始没有当回事，因为觉得不可能自己不可能被C，晚一些的时候发现内网权限突然消失。于是联系小丁（化名）和师兄，他们都觉得非常震惊。</p>
<span id="more"></span>

<p>后面不知道咋回事，又和小智、师兄一起散步，小智问到师兄最近在干嘛，师兄毫不犹豫的回答“在找工作”。小智脸色瞬间变了。</p>
<p>在后面的事情就比较魔幻了，师兄、小雨以及我不知道怎么出现在我的徐州老家，一起围观一群人在二楼平台打羽毛球。还有人把球打到一楼去了，有人嚷嚷着去捡。我对师兄说太阳太大了，好热，于是一屁股坐在了阴凉的地方。突然发现脚上有一只巨大无比的蚂蚁，我直接把它按死在脚面上，结果蚂蚁瞬间分裂成一些不知名的昆虫，有些一根巨长的口器，一下子扎在了肉里。师兄大惊失色，说这玩意不好弄，也不要用手扣出来，会死的，唯一的办法是用火烧出来。我拿的打火机烧脚面，把口器从肉里烧出来。</p>
<p>再然后，突然就醒了。</p>
]]></content>
      <tags>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog重生于2022/07/24</title>
    <url>/posts/152cd35c/</url>
    <content><![CDATA[<p>2022年7月份, 公司开始了裁员计划，虽然名单没有我，但我的心态也发生了一些转变，都是打工人，个人就不要讲什么情怀了，希望公司也不要灌输价值观，说白了都是资本家奴役的手段而已</p>
<p>之前还经常在语雀或者内网ATA发一些技术贴，想想如果自己未来离开这里，啥都带不走也是蛮可惜的。</p>
<p>所以，很久不用的技术博客就复活吧。</p>
<p>[更新：一个朋友被裁了，拿了N+5，然后转头入职B站，base涨幅接近50%，我想说我也想要]</p>
]]></content>
      <tags>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Ftrace探析</title>
    <url>/posts/b7ee8ec8/</url>
    <content><![CDATA[<p>ftrace（function tracer）支持全局trace，可以对内核和模块全局函数进行跟踪。tracer为编译器在编译时自动插入代码段的一条指令，程序在运行时能够利用这条指令实现跳转。目前Linux 5.10支持的tracer种类有8种，分别为<code>hwlat</code>、<code>blk</code>、<code>function_graph</code>、<code>wakeup_dl</code>、<code>wakeup_rt</code>、<code>wakeup</code>、<code>function</code>、<code>nop</code>，可以通过<code>/sys/kernel/debug/tracing/available_tracers</code>查看。</p>
<span id="more"></span>

<p>GCC允许在编译程序时添加<code>-pg</code>在每一个函数起始处自动插入5个字节的<code>call mcount</code>（ARM64为<code>push rbp</code>）指令，<code>mcount</code>的实现依赖于GLIBC。由于<code>mcount</code>不能记录参数，所以从GCC 4.6开始通过<code>-pg -mfentry</code>将<code>mcount</code>替换为<code>fentry</code>，但是内核中依然使用宏MCOUNT_ADDR来代表GLIBC实现的<code>fentry</code>。如今，内核已经废弃<code>mcount</code>（抱歉，不记得从哪个版本废弃的了）。</p>
<p>编写一个简单程序<code>hello.c</code>做实验：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译该文件<code>gcc -o hello.o hello.c</code>，然后<code>objdump -S hello.o</code>，可以看到如下形式的经过重定向的汇编代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000401050 &lt;__fentry__@plt&gt;:</span><br><span class="line">  401050:	ff 25 d2 2f 00 00    	jmpq   *0x2fd2(%rip)        # 404028 &lt;__fentry__@GLIBC_2.13&gt;</span><br><span class="line">  401056:	68 02 00 00 00       	pushq  $0x2</span><br><span class="line">  40105b:	e9 c0 ff ff ff       	jmpq   401020 &lt;.plt&gt;</span><br><span class="line">  </span><br><span class="line">0000000000401196 &lt;main&gt;:</span><br><span class="line">  401196:	e8 b5 fe ff ff       	callq  401050 &lt;__fentry__@plt&gt;</span><br><span class="line">  40119b:	55                   	push   %rbp</span><br><span class="line">  40119c:	48 89 e5             	mov    %rsp,%rbp</span><br><span class="line">  40119f:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  4011a4:	5d                   	pop    %rbp</span><br><span class="line">  4011a5:	c3                   	retq</span><br><span class="line">  4011a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  4011ad:	00 00 00</span><br></pre></td></tr></table></figure>

<p>看到GCC在main函数的起始位置插入了5个bytes的callq指令（汇编opcode为0xfffffeb5e8）。</p>
<p>编译模块时会用到内核源码树中的<code>Makefile</code>和<code>.config</code>文件（实际上是根据<code>.config</code>生成的<code>include/config/auto.conf</code>文件），如果内核源码树中的配置打开了<code>CONFIG_FUNCTION_TRACER</code>，那么在编译模块时也会增加<code>-pg -mfentry</code>，并将影响了的函数地址保存在<code>__mcount_loc</code>段中。</p>
<p>在加载.ko时首先根据模块放置的实际地址为<code>__mcount_loc</code>段重定向，并记录在<code>mod-&gt;ftrace_callsites</code>中，最后同样会调用<code>ftrace_process_locs</code>函数来处理（前文有提到该函数）。</p>
<p>如果当前运行的内核打开了<code>CONFIG_FUNCTION_TRACER</code>，但编译<code>module</code>时未打开，实际上编出来的.ko也能加载，只是其中的函数都不支持trace。</p>
<h3 id="ftrace初始化"><a href="#ftrace初始化" class="headerlink" title="ftrace初始化"></a>ftrace初始化</h3><p>ftrace实现代码位于<code>kernel/trace/</code>目录下，初始化代码入口是<code>ftrace_init</code>（由<code>init/main.c</code>文件内<code>start_kernel</code>函数调用）。代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __init <span class="title function_">ftrace_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">extern</span> <span class="type">unsigned</span> <span class="type">long</span> __start_mcount_loc[];</span><br><span class="line">	<span class="keyword">extern</span> <span class="type">unsigned</span> <span class="type">long</span> __stop_mcount_loc[];</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> count, flags;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">	local_irq_save(flags);</span><br><span class="line">	ret = ftrace_dyn_arch_init();</span><br><span class="line">	local_irq_restore(flags);</span><br><span class="line">	<span class="keyword">if</span> (ret)</span><br><span class="line">		<span class="keyword">goto</span> failed;</span><br><span class="line"></span><br><span class="line">	count = __stop_mcount_loc - __start_mcount_loc;</span><br><span class="line">	<span class="keyword">if</span> (!count) &#123;</span><br><span class="line">		pr_info(<span class="string">&quot;ftrace: No functions to be traced?\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> failed;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pr_info(<span class="string">&quot;ftrace: allocating %ld entries in %ld pages\n&quot;</span>,</span><br><span class="line">		count, count / ENTRIES_PER_PAGE + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	last_ftrace_enabled = ftrace_enabled = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	ret = ftrace_process_locs(<span class="literal">NULL</span>,</span><br><span class="line">				  __start_mcount_loc,</span><br><span class="line">				  __stop_mcount_loc);</span><br><span class="line"></span><br><span class="line">	pr_info(<span class="string">&quot;ftrace: allocated %ld pages with %ld groups\n&quot;</span>,</span><br><span class="line">		ftrace_number_of_pages, ftrace_number_of_groups);</span><br><span class="line"></span><br><span class="line">	set_ftrace_early_filters();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line"> failed:</span><br><span class="line">	ftrace_disabled = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码将将对<code>__start_mcount_loc</code>和<code>__stop_mcount_loc</code>(由内核链接脚本<code>include/asm-generic/vmlinux.lds.h</code>定义的段，放置所有段名为<code>__mcount_loc</code>、<code>__patchable_function_entries</code>的代码）中间的代码段进行特殊处理。有测试数据显示，给函数增加callq\retq指令会带来13%的性能损耗，所以，ftrace初始化时的“特殊处理”就是将插入的指令替换为5 bytes的nop指令，以x86_64为例，大小5个bytes的nop指令为0x0f 1f 44 00 00，同时将这些代码段地址记录下来。</p>
<p>内核记录插入指令的数据结构为<code>struct dyn_ftrace</code>，其中ip存放代码段地址，flags存放标志位（unsigned long，低23位存放该函数注册callback的数量，23位以上存放该函数是否被trace、是否需要保存寄存器等标志位），arch存放不同架构所需的额外数据。整体结构如下入所示：</p>
<p><img data-src="/../images/ftrace.png" alt="image-20210619185753069"></p>
<p>一个page能够存放的ftrace entry计算方式为<code>PAGE_SIZE / sizeof(struct dyn_ftrace)</code>，所需要的ftrace entry的数目为<code>__stop_mcount_loc - __start_mcount_loc</code>，所以总共需要的物理页数量为<code>(__stop_mcount_loc - start_mcount_loc) / (PAGE_SIZE / sizeof(struct dyn_ftrace))</code>向上取整。由于Linux系统内存分配采取伙伴系统，存在order的概念，描述伙伴系统中不同大小的连续物理内存集簇（MAX_ORDER通常为11，所以kmalloc能够分配的最大内存为<code>2^(MAX_ORDER - 1) * PAGE_SIZE = 4MB</code>），ftrace希望能够最大可能占用连续的物理页，所以根据<code>order=tls(page) - 1</code>来尝试从尽可能大的order分配。然而事情有时候不尽如人意，如果分配<code>2^order</code>连续物理页失败，则<code>order = order&gt;&gt;1</code>继续分配，并将拿到的物理页放入下一个ftrace_page group。</p>
<p>最关键的函数是<code>ftrace_make_nop</code>，函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ftrace_make_nop</span><span class="params">(<span class="keyword">struct</span> module *mod, <span class="keyword">struct</span> dyn_ftrace *rec, <span class="type">unsigned</span> <span class="type">long</span> addr)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> ip = rec-&gt;ip;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *new, *old;</span><br><span class="line"></span><br><span class="line">	old = ftrace_call_replace(ip, addr);</span><br><span class="line">	new = ftrace_nop_replace();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * On boot up, and when modules are loaded, the MCOUNT_ADDR</span></span><br><span class="line"><span class="comment">	 * is converted to a nop, and will never become MCOUNT_ADDR</span></span><br><span class="line"><span class="comment">	 * again. This code is either running before SMP (on boot up)</span></span><br><span class="line"><span class="comment">	 * or before the code will ever be executed (module load).</span></span><br><span class="line"><span class="comment">	 * We do not want to use the breakpoint version in this case,</span></span><br><span class="line"><span class="comment">	 * just modify the code directly.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (addr == MCOUNT_ADDR)</span><br><span class="line">		<span class="keyword">return</span> ftrace_modify_code_direct(ip, old, new);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * x86 overrides ftrace_replace_code -- this function will never be used</span></span><br><span class="line"><span class="comment">	 * in this case.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	WARN_ONCE(<span class="number">1</span>, <span class="string">&quot;invalid use of ftrace_make_nop&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ftrace_call_replace函数直接调用text_gen_insn，这里是为了拿到代码段ip地址的指令，但是实现逻辑暂时没有搞清楚，据说涉及kernel-5.10新特性<code>static calls</code>，在这里挖个坑，详情参考：<a href="https://blog.yossarian.net/2020/12/16/Static-calls-in-Linux-5-10%E3%80%82">https://blog.yossarian.net/2020/12/16/Static-calls-in-Linux-5-10。</a></p>
<p>以x86_64为例，ftrace_nop_replace找到大小为5个bytes的nop指令，该指令存放在x86_nops全局数组中，直接返回x86_nops[5]即可，x86_nops[5]通过一系列的数组和宏解析，最终返回的结果0x0f 1f 44 00 00，对应的nop指令为nopl 0x00(%eax, %eax, 1)。具体实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Generic 64bit nops from GAS:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1: nop</span></span><br><span class="line"><span class="comment"> * 2: osp nop</span></span><br><span class="line"><span class="comment"> * 3: nopl (%eax)</span></span><br><span class="line"><span class="comment"> * 4: nopl 0x00(%eax)</span></span><br><span class="line"><span class="comment"> * 5: nopl 0x00(%eax,%eax,1)</span></span><br><span class="line"><span class="comment"> * 6: osp nopl 0x00(%eax,%eax,1)</span></span><br><span class="line"><span class="comment"> * 7: nopl 0x00000000(%eax)</span></span><br><span class="line"><span class="comment"> * 8: nopl 0x00000000(%eax,%eax,1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTES_NOP1	0x90</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTES_NOP2	0x66,BYTES_NOP1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTES_NOP3	0x0f,0x1f,0x00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTES_NOP4	0x0f,0x1f,0x40,0x00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTES_NOP5	0x0f,0x1f,0x44,0x00,0x00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTES_NOP6	0x66,BYTES_NOP5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTES_NOP7	0x0f,0x1f,0x80,0x00,0x00,0x00,0x00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTES_NOP8	0x0f,0x1f,0x84,0x00,0x00,0x00,0x00,0x00</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> x86nops[] =</span><br><span class="line">&#123;</span><br><span class="line">	BYTES_NOP1,</span><br><span class="line">	BYTES_NOP2,</span><br><span class="line">	BYTES_NOP3,</span><br><span class="line">	BYTES_NOP4,</span><br><span class="line">	BYTES_NOP5,</span><br><span class="line">	BYTES_NOP6,</span><br><span class="line">	BYTES_NOP7,</span><br><span class="line">	BYTES_NOP8,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> * <span class="type">const</span> x86_nops[ASM_NOP_MAX+<span class="number">1</span>] =</span><br><span class="line">&#123;</span><br><span class="line">	<span class="literal">NULL</span>,</span><br><span class="line">	x86nops,</span><br><span class="line">	x86nops + <span class="number">1</span>,</span><br><span class="line">	x86nops + <span class="number">1</span> + <span class="number">2</span>,</span><br><span class="line">	x86nops + <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span>,</span><br><span class="line">	x86nops + <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span>,</span><br><span class="line">	x86nops + <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> + <span class="number">5</span>,</span><br><span class="line">	x86nops + <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> + <span class="number">5</span> + <span class="number">6</span>,</span><br><span class="line">	x86nops + <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> + <span class="number">5</span> + <span class="number">6</span> + <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>ftrace_modify_code_direct</code>将相应代码段地址的指令替换为新的5个bytes大小的nop指令。至此ftrace_init基本完成。</p>
<h3 id="ftrace主要框架构成"><a href="#ftrace主要框架构成" class="headerlink" title="ftrace主要框架构成"></a>ftrace主要框架构成</h3><h4 id="ring-buffer"><a href="#ring-buffer" class="headerlink" title="ring buffer"></a>ring buffer</h4><p>ftrace可以支持多种tracer，<code>ring buffer</code>用来存放tracer触发的数据，<code>per_cpu</code>的结构。此外，还有以下特性：</p>
<ul>
<li><code>struct ring_buffer_per_cpu</code>根据<code>size</code>来分配<code>buffer_page</code>，并将这些<code>pages</code>通过<code>list_head</code>链接成环，这就是“<code>ring</code>”的由来</li>
<li><code>buffer_page</code>仅是一个控制结构，真正的<code>page</code>是<code>struct buffer_data_page</code>，用来存放数据。<code>data[]</code>数据空间通过<code>struct ring_buffer_event</code>控制格式</li>
<li><code>struct ring_buffer_per_cpu</code>通过<code>head_page</code>(头指针\读)、<code>tail_page</code>(尾指针\写)、<code>commit_page</code>(写确认)来管理<code>ring</code>；同理<code>buffer_page-&gt;write</code>、<code>buffer_page-&gt;read</code>、<code>buffer_data_page-&gt;commit</code>来管理page内偏移量</li>
<li><code>ring_buffer_per_cpu-&gt;reader_page</code>还包含一个单独的<code>buffer_page</code>，用以支持<code>reader</code>方式的读方式</li>
</ul>
<p><code>ring buffer</code>结构如下图所示：</p>
<p><img data-src="/../images/ring_buffer.png" alt="ring_buffer"></p>
<p><code>ring buffer</code>初始化函数是<code>early_trace_init</code>，同样由<code>init/main.c</code>文件内<code>start_kernel</code>函数调用。详细函数调用流程如下：</p>
<p><code>start_kernel-&gt;early_trace_init-&gt;tracer_alloc_buffers-&gt;ring_buffer_alloc-&gt;__ring_buffer_alloc</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* __ring_buffer_alloc - allocate a new ring_buffer</span></span><br><span class="line"><span class="comment"> * @size: the size in bytes per cpu that is needed.</span></span><br><span class="line"><span class="comment"> * @flags: attributes to set for the ring buffer.</span></span><br><span class="line"><span class="comment"> * @key: ring buffer reader_lock_key.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Currently the only flag that is available is the RB_FL_OVERWRITE</span></span><br><span class="line"><span class="comment"> * flag. This flag means that the buffer will overwrite old data</span></span><br><span class="line"><span class="comment"> * when the buffer wraps. If this flag is not set, the buffer will</span></span><br><span class="line"><span class="comment"> * drop data when the tail hits the head.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trace_buffer</span> *__<span class="title">ring_buffer_alloc</span>(<span class="title">unsigned</span> <span class="title">long</span> <span class="title">size</span>, <span class="title">unsigned</span> <span class="title">flags</span>,</span></span><br><span class="line"><span class="class">					<span class="keyword">struct</span> <span class="title">lock_class_key</span> *<span class="title">key</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">trace_buffer</span> *<span class="title">buffer</span>;</span></span><br><span class="line">	<span class="type">long</span> nr_pages;</span><br><span class="line">	<span class="type">int</span> bsize;</span><br><span class="line">	<span class="type">int</span> cpu;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* keep it in its own cache line */</span></span><br><span class="line">	buffer = kzalloc(ALIGN(<span class="keyword">sizeof</span>(*buffer), cache_line_size()),</span><br><span class="line">			 GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!buffer)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!zalloc_cpumask_var(&amp;buffer-&gt;cpumask, GFP_KERNEL))</span><br><span class="line">		<span class="keyword">goto</span> fail_free_buffer;</span><br><span class="line"></span><br><span class="line">	nr_pages = DIV_ROUND_UP(size, BUF_PAGE_SIZE);</span><br><span class="line">	buffer-&gt;flags = flags;</span><br><span class="line">	buffer-&gt;clock = trace_clock_local;</span><br><span class="line">	buffer-&gt;reader_lock_key = key;</span><br><span class="line"></span><br><span class="line">	init_irq_work(&amp;buffer-&gt;irq_work.work, rb_wake_up_waiters);</span><br><span class="line">	init_waitqueue_head(&amp;buffer-&gt;irq_work.waiters);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* need at least two pages */</span></span><br><span class="line">	<span class="keyword">if</span> (nr_pages &lt; <span class="number">2</span>)</span><br><span class="line">		nr_pages = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	buffer-&gt;cpus = nr_cpu_ids;</span><br><span class="line"></span><br><span class="line">	bsize = <span class="keyword">sizeof</span>(<span class="type">void</span> *) * nr_cpu_ids;</span><br><span class="line">	buffer-&gt;buffers = kzalloc(ALIGN(bsize, cache_line_size()),</span><br><span class="line">				  GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!buffer-&gt;buffers)</span><br><span class="line">		<span class="keyword">goto</span> fail_free_cpumask;</span><br><span class="line"></span><br><span class="line">	cpu = raw_smp_processor_id();</span><br><span class="line">	cpumask_set_cpu(cpu, buffer-&gt;cpumask);</span><br><span class="line">	buffer-&gt;buffers[cpu] = rb_allocate_cpu_buffer(buffer, nr_pages, cpu);</span><br><span class="line">	<span class="keyword">if</span> (!buffer-&gt;buffers[cpu])</span><br><span class="line">		<span class="keyword">goto</span> fail_free_buffers;</span><br><span class="line"></span><br><span class="line">	ret = cpuhp_state_add_instance(CPUHP_TRACE_RB_PREPARE, &amp;buffer-&gt;node);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">goto</span> fail_free_buffers;</span><br><span class="line"></span><br><span class="line">	mutex_init(&amp;buffer-&gt;mutex);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> buffer;</span><br><span class="line"></span><br><span class="line"> fail_free_buffers:</span><br><span class="line">	for_each_buffer_cpu(buffer, cpu) &#123;</span><br><span class="line">		<span class="keyword">if</span> (buffer-&gt;buffers[cpu])</span><br><span class="line">			rb_free_cpu_buffer(buffer-&gt;buffers[cpu]);</span><br><span class="line">	&#125;</span><br><span class="line">	kfree(buffer-&gt;buffers);</span><br><span class="line"></span><br><span class="line"> fail_free_cpumask:</span><br><span class="line">	free_cpumask_var(buffer-&gt;cpumask);</span><br><span class="line"></span><br><span class="line"> fail_free_buffer:</span><br><span class="line">	kfree(buffer);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(__ring_buffer_alloc);</span><br></pre></td></tr></table></figure>

<p>其中代码流程都很常规，需要注意一些小trick:</p>
<ul>
<li>很多时候分配内存都是cache_line_size对齐，这是由于涉及per_cpu类型的数据都要尤其注意，缓存行对齐防止不必要的访存。</li>
<li>仅针对当前cpu（通过<code>raw_smp_processor_id()</code>获取）分配<code>ring buffer</code>，最初的实现是针对每一个cpu同时创建<code>ring buffer</code>，由于当前内核还没有初始化<code>sched</code>和<code>irq</code>，我认为由当前cpu为其它cpu分配<code>ring buffer</code>确实有点不太合理。最新的实现新增了一个cpu状态<code>CPUHP_TRACE_RB_PREPARE</code>，调用<code>cpuhp_setup_state_multi(CPUHP_TRACE_RB_PREPARE, &quot;trace/RB:prepare&quot;, trace_rb_cpu_prepare, NULL)</code>为该状态注册一个callback函数，然后调用<code>cpuhp_state_add_instance(CPUHP_TRACE_RB_PREPARE, &amp;buffer-&gt;node)</code>显示触发<code>CPUHP_TRACE_RB_PREPARE</code>。这一修改参见：<a href="https://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1280988.html">https://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1280988.html</a></li>
</ul>
<p><code>ring buffer</code>是trace机制的基础，用来记录tracer信息。而ftrace可能发生在不同的上下文中执行（可能是正常进程上下文、终端、NMI等），所以需要对<code>ring buffer</code>进行互斥访问。但是又由于ftrace不能给正常的内核业务带来过大的开销，引入了无锁的设计。为了支持<code>nested-write</code>嵌套写的免锁操作，引入<code>commit</code>的概念。这里是整个<code>ring buffer</code>设计的精髓。为了防止误导各位同学，这里不做解读。具体设计参加linux官方文档：<a href="https://www.kernel.org/doc/Documentation/trace/ring-buffer-design.txt">https://www.kernel.org/doc/Documentation/trace/ring-buffer-design.txt</a></p>
<h4 id="ftracefs"><a href="#ftracefs" class="headerlink" title="ftracefs"></a>ftracefs</h4><p>ftrace是内核的机制，用户需要利用该机制进行内核调试、性能分析等，所以内核提供ftracefs给用户提供定制化ftrace服务、呈现结果。</p>
<p>ftracefs通过三大类呈现，分别是<code>tracer</code>、<code>filter_functions</code>、<code>event</code>。上文提到目前Linux 5.10支持的tracer种类有8种，分别为<code>hwlat</code>、<code>blk</code>、<code>function_graph</code>、<code>wakeup_dl</code>、<code>wakeup_rt</code>、<code>wakeup</code>、<code>function</code>、<code>nop</code>，选取function_graph为例来查看open系统调用的调用流程。</p>
<p>通过ftracefs进入如下设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 0 &gt; /sys/kernel/debug/tracing/tracing_on   #关闭trace</span><br><span class="line">echo function_graph &gt; /sys/kernel/debug/tracing/current_tracer    #设置跟踪函数调用栈</span><br><span class="line">echo 1 &gt; /sys/kernel/debug/tracing/tracing_on   #打开trace</span><br><span class="line">ls			#触发open系统调用</span><br><span class="line">echo 0 &gt; /sys/kernel/debug/tracing/tracing_on   #关闭trace</span><br></pre></td></tr></table></figure>

<p>查看文件<code>/sys/kernel/debug/tracing/trace</code>，所有信息都是从<code>ring buffer</code>读取，由于是无锁的，在对function_graph做trace时需要确保没有其他的event干扰。可以显示open系统调用的调用链、执行CPU、函数耗时。如下所示，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># tracer: function_graph</span><br><span class="line">#</span><br><span class="line"># CPU  DURATION                  FUNCTION CALLS</span><br><span class="line"># |     |   |                     |   |   |   |</span><br><span class="line"> 0)               |  __x64_sys_openat() &#123;</span><br><span class="line"> 0)               |    do_sys_openat2() &#123;</span><br><span class="line"> 0)               |      getname() &#123;</span><br><span class="line"> 0)               |        getname_flags.part.0() &#123;</span><br><span class="line"> 0)               |          kmem_cache_alloc() &#123;</span><br><span class="line"> 0)   0.181 us    |            should_failslab();</span><br><span class="line"> 0)   0.530 us    |          &#125;</span><br><span class="line"> 0)               |          __check_object_size() &#123;</span><br><span class="line"> 0)               |            __check_object_size.part.0() &#123;</span><br><span class="line"> 0)   0.198 us    |              check_stack_object();</span><br><span class="line"> 0)   0.181 us    |              __virt_addr_valid();</span><br><span class="line"> 0)   0.186 us    |              __check_heap_object();</span><br><span class="line"> 0)   1.234 us    |            &#125;</span><br><span class="line"> 0)   1.553 us    |          &#125;</span><br><span class="line"> 0)   2.630 us    |        &#125;</span><br><span class="line"> 0)   2.954 us    |      &#125;</span><br><span class="line"> 0)               |      get_unused_fd_flags() &#123;</span><br><span class="line"> 0)               |        __alloc_fd() &#123;</span><br><span class="line"> 0)   0.380 us    |          _raw_spin_lock();</span><br><span class="line"> 0)   0.177 us    |          expand_files();</span><br><span class="line"> 0)   1.397 us    |        &#125;</span><br><span class="line"> 0)   1.802 us    |      &#125;</span><br><span class="line"> 0)               |      do_filp_open() &#123;</span><br><span class="line"> 0)               |        path_openat() &#123;</span><br><span class="line"> 0)               |          alloc_empty_file() &#123;</span><br><span class="line"> 0)               |            __alloc_file() &#123;</span><br><span class="line"> 0)               |              kmem_cache_alloc() &#123;</span><br><span class="line"> 0)   0.177 us    |                should_failslab();</span><br><span class="line"> 0)   0.866 us    |              &#125;</span><br><span class="line"> 0)               |              security_file_alloc() &#123;</span><br><span class="line"> 0)               |                kmem_cache_alloc() &#123;</span><br><span class="line"> 0)   0.177 us    |                  should_failslab();</span><br><span class="line"> 0)   0.962 us    |                &#125;</span><br><span class="line"> 0)   1.310 us    |              &#125;</span><br><span class="line"> 0)   0.176 us    |              __mutex_init();</span><br><span class="line"> 0)   3.432 us    |            &#125;</span><br><span class="line"> 0)   3.932 us    |          &#125;</span><br><span class="line"> 0)               |          path_init() &#123;</span><br><span class="line"> 0)               |            nd_jump_root() &#123;</span><br><span class="line"> 0)   0.176 us    |              set_root();</span><br><span class="line"> 0)   0.511 us    |            &#125;</span><br><span class="line"> 0)   0.868 us    |          &#125;</span><br><span class="line"> 0)               |          link_path_walk.part.0() &#123;</span><br><span class="line"> 0)               |            inode_permission.part.0() &#123;</span><br><span class="line"> 0)   0.204 us    |              generic_permission();</span><br><span class="line"> 0)   0.179 us    |              security_inode_permission();</span><br><span class="line"> 0)   0.883 us    |            &#125;</span><br><span class="line"> 0)               |            walk_component() &#123;</span><br><span class="line"> 0)               |              lookup_fast() &#123;</span><br><span class="line"> 0)   0.236 us    |                __d_lookup_rcu();</span><br><span class="line"> 0)   0.859 us    |              &#125;</span><br><span class="line"> 0)               |              step_into() &#123;</span><br><span class="line"> 0)   0.180 us    |                __follow_mount_rcu();</span><br><span class="line"> 0)   0.521 us    |              &#125;</span><br><span class="line"> 0)   1.952 us    |            &#125;</span><br><span class="line"> 0)               |            inode_permission.part.0() &#123;</span><br><span class="line"> 0)   0.177 us    |              generic_permission();</span><br><span class="line"> 0)   0.180 us    |              security_inode_permission();</span><br><span class="line"> 0)   1.010 us    |            &#125;</span><br><span class="line"> 0)               |            walk_component() &#123;</span><br><span class="line"> 0)               |              lookup_fast() &#123;</span><br><span class="line"> 0)   0.376 us    |                __d_lookup_rcu();</span><br><span class="line"> 0)   0.738 us    |              &#125;</span><br><span class="line"> 0)               |              step_into() &#123;</span><br><span class="line"> 0)   0.182 us    |                __follow_mount_rcu();</span><br><span class="line"> 0)   0.521 us    |              &#125;</span><br><span class="line"> 0)   1.768 us    |            &#125;</span><br><span class="line"> 0)               |            inode_permission.part.0() &#123;</span><br><span class="line"> 0)   0.182 us    |              generic_permission();</span><br><span class="line"> 0)   0.176 us    |              security_inode_permission();</span><br><span class="line"> 0)   0.846 us    |            &#125;</span><br><span class="line"> 0)   7.724 us    |          &#125;</span><br><span class="line"> 0)               |          open_last_lookups() &#123;</span><br><span class="line"> 0)               |            lookup_fast() &#123;</span><br><span class="line"> 0)   0.184 us    |              __d_lookup_rcu();</span><br><span class="line"> 0)   0.518 us    |            &#125;</span><br><span class="line"> 0)               |            step_into() &#123;</span><br><span class="line"> 0)   0.179 us    |              __follow_mount_rcu();</span><br><span class="line"> 0)   0.513 us    |            &#125;</span><br><span class="line"> 0)   1.525 us    |          &#125;</span><br><span class="line"> 0)               |          do_open() &#123;</span><br><span class="line"> 0)               |            complete_walk() &#123;</span><br><span class="line"> 0)               |              try_to_unlazy() &#123;</span><br><span class="line"> 0)   0.181 us    |                legitimize_links();</span><br><span class="line"> 0)               |                __legitimize_path() &#123;</span><br><span class="line"> 0)   0.184 us    |                  __legitimize_mnt();</span><br><span class="line"> 0)   0.527 us    |                &#125;</span><br><span class="line"> 0)   0.179 us    |                legitimize_root();</span><br><span class="line"> 0)   0.179 us    |                rcu_read_unlock_strict();</span><br><span class="line"> 0)   1.883 us    |              &#125;</span><br><span class="line"> 0)   2.212 us    |            &#125;</span><br><span class="line"> 0)               |            may_open() &#123;</span><br><span class="line"> 0)               |              inode_permission() &#123;</span><br><span class="line"> 0)               |                inode_permission.part.0() &#123;</span><br><span class="line"> 0)   0.199 us    |                  generic_permission();</span><br><span class="line"> 0)   0.179 us    |                  security_inode_permission();</span><br><span class="line"> 0)   0.856 us    |                &#125;</span><br><span class="line"> 0)   1.174 us    |              &#125;</span><br><span class="line"> 0)   1.543 us    |            &#125;</span><br><span class="line"> 0)               |            vfs_open() &#123;</span><br><span class="line"> 0)               |              do_dentry_open() &#123;</span><br><span class="line"> 0)               |                path_get() &#123;</span><br><span class="line"> 0)   0.180 us    |                  mntget();</span><br><span class="line"> 0)   0.512 us    |                &#125;</span><br><span class="line"> 0)   0.180 us    |                try_module_get();</span><br><span class="line"> 0)               |                security_file_open() &#123;</span><br><span class="line"> 0)   0.327 us    |                  __fsnotify_parent();</span><br><span class="line"> 0)   0.722 us    |                &#125;</span><br><span class="line"> 0)               |                ext4_file_open [ext4]() &#123;</span><br><span class="line"> 0)   0.249 us    |                  ext4_sample_last_mounted [ext4]();</span><br><span class="line"> 0)               |                  dquot_file_open() &#123;</span><br><span class="line"> 0)   0.239 us    |                    generic_file_open();</span><br><span class="line"> 0)   0.707 us    |                  &#125;</span><br><span class="line"> 0)   1.597 us    |                &#125;</span><br><span class="line"> 0)   0.744 us    |                file_ra_state_init();</span><br><span class="line"> 0)   5.942 us    |              &#125;</span><br><span class="line"> 0)   6.365 us    |            &#125;</span><br><span class="line"> 0)               |            ima_file_check() &#123;</span><br><span class="line"> 0)   0.326 us    |              security_task_getsecid();</span><br><span class="line"> 0)   0.216 us    |              process_measurement();</span><br><span class="line"> 0)   1.161 us    |            &#125;</span><br><span class="line"> 0) + 12.117 us   |          &#125;</span><br><span class="line"> 0)               |          terminate_walk() &#123;</span><br><span class="line"> 0)               |            dput() &#123;</span><br><span class="line"> 0)   0.182 us    |              rcu_read_unlock_strict();</span><br><span class="line"> 0)   0.525 us    |            &#125;</span><br><span class="line"> 0)               |            mntput() &#123;</span><br><span class="line"> 0)               |              mntput_no_expire() &#123;</span><br><span class="line"> 0)   0.179 us    |                rcu_read_unlock_strict();</span><br><span class="line"> 0)   0.518 us    |              &#125;</span><br><span class="line"> 0)   0.843 us    |            &#125;</span><br><span class="line"> 0)   1.851 us    |          &#125;</span><br><span class="line"> 0) + 29.215 us   |        &#125;</span><br><span class="line"> 0) + 29.607 us   |      &#125;</span><br><span class="line"> 0)   0.198 us    |      __fsnotify_parent();</span><br><span class="line"> 0)               |      fd_install() &#123;</span><br><span class="line"> 0)   0.178 us    |        __fd_install();</span><br><span class="line"> 0)   0.569 us    |      &#125;</span><br><span class="line"> 0)               |      putname() &#123;</span><br><span class="line"> 0)   0.187 us    |        kmem_cache_free();</span><br><span class="line"> 0)   0.593 us    |      &#125;</span><br><span class="line"> 0) + 37.556 us   |    &#125;</span><br><span class="line"> 0) + 38.021 us   |  &#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vim个性化主题配置</title>
    <url>/posts/9e0ab315/</url>
    <content><![CDATA[<p>以molokai主题为例，新建文件<code>~/.vim/colors/molokai.vim</code>，文件内容如下：</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hi clear</span><br><span class="line">if version &gt; 580</span><br><span class="line">    hi clear</span><br><span class="line">    if exists(&quot;syntax_on&quot;)</span><br><span class="line">        syntax reset</span><br><span class="line">    endif</span><br><span class="line">endif</span><br><span class="line">let g:colors_name=&quot;molokai&quot;</span><br><span class="line"></span><br><span class="line">if exists(&quot;g:molokai_original&quot;)</span><br><span class="line">    let s:molokai_original = g:molokai_original</span><br><span class="line">else</span><br><span class="line">    let s:molokai_original = 0</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">hi Boolean         guifg=#AE81FF</span><br><span class="line">hi Character       guifg=#E6DB74</span><br><span class="line">hi Number          guifg=#AE81FF</span><br><span class="line">hi String          guifg=#E6DB74</span><br><span class="line">hi Conditional     guifg=#F92672               gui=bold</span><br><span class="line">hi Constant        guifg=#AE81FF               gui=bold</span><br><span class="line">hi Cursor          guifg=#000000 guibg=#F8F8F0</span><br><span class="line">hi iCursor         guifg=#000000 guibg=#F8F8F0</span><br><span class="line">hi Debug           guifg=#BCA3A3               gui=bold</span><br><span class="line">hi Define          guifg=#66D9EF</span><br><span class="line">hi Delimiter       guifg=#8F8F8F</span><br><span class="line">hi DiffAdd                       guibg=#13354A</span><br><span class="line">hi DiffChange      guifg=#89807D guibg=#4C4745</span><br><span class="line">hi DiffDelete      guifg=#960050 guibg=#1E0010</span><br><span class="line">hi DiffText                      guibg=#4C4745 gui=italic,bold</span><br><span class="line"></span><br><span class="line">hi Directory       guifg=#A6E22E               gui=bold</span><br><span class="line">hi Error           guifg=#E6DB74 guibg=#1E0010</span><br><span class="line">hi ErrorMsg        guifg=#F92672 guibg=#232526 gui=bold</span><br><span class="line">hi Exception       guifg=#A6E22E               gui=bold</span><br><span class="line">hi Float           guifg=#AE81FF</span><br><span class="line">hi FoldColumn      guifg=#465457 guibg=#000000</span><br><span class="line">hi Folded          guifg=#465457 guibg=#000000</span><br><span class="line">hi Function        guifg=#A6E22E</span><br><span class="line">hi Identifier      guifg=#FD971F</span><br><span class="line">hi Ignore          guifg=#808080 guibg=bg</span><br><span class="line">hi IncSearch       guifg=#C4BE89 guibg=#000000</span><br><span class="line"></span><br><span class="line">hi Keyword         guifg=#F92672               gui=bold</span><br><span class="line">hi Label           guifg=#E6DB74               gui=none</span><br><span class="line">hi Macro           guifg=#C4BE89               gui=italic</span><br><span class="line">hi SpecialKey      guifg=#66D9EF               gui=italic</span><br><span class="line"></span><br><span class="line">hi MatchParen      guifg=#000000 guibg=#FD971F gui=bold</span><br><span class="line">hi ModeMsg         guifg=#E6DB74</span><br><span class="line">hi MoreMsg         guifg=#E6DB74</span><br><span class="line">hi Operator        guifg=#F92672</span><br><span class="line"></span><br><span class="line">hi Pmenu           guifg=#66D9EF guibg=#000000</span><br><span class="line">hi PmenuSel                      guibg=#808080</span><br><span class="line">hi PmenuSbar                     guibg=#080808</span><br><span class="line">hi PmenuThumb      guifg=#66D9EF</span><br><span class="line"></span><br><span class="line">hi PreCondit       guifg=#A6E22E               gui=bold</span><br><span class="line">hi PreProc         guifg=#A6E22E</span><br><span class="line">hi Question        guifg=#66D9EF</span><br><span class="line">hi Repeat          guifg=#F92672               gui=bold</span><br><span class="line">hi Search          guifg=#000000 guibg=#FFE792</span><br><span class="line">hi SignColumn      guifg=#A6E22E guibg=#232526</span><br><span class="line">hi SpecialChar     guifg=#F92672               gui=bold</span><br><span class="line">hi SpecialComment  guifg=#7E8E91               gui=bold</span><br><span class="line">hi Special         guifg=#66D9EF guibg=bg      gui=italic</span><br><span class="line">if has(&quot;spell&quot;)</span><br><span class="line">    hi SpellBad    guisp=#FF0000 gui=undercurl</span><br><span class="line">    hi SpellCap    guisp=#7070F0 gui=undercurl</span><br><span class="line">    hi SpellLocal  guisp=#70F0F0 gui=undercurl</span><br><span class="line">    hi SpellRare   guisp=#FFFFFF gui=undercurl</span><br><span class="line">endif</span><br><span class="line">hi Statement       guifg=#F92672               gui=bold</span><br><span class="line">hi StatusLine      guifg=#455354 guibg=fg</span><br><span class="line">hi StatusLineNC    guifg=#808080 guibg=#080808</span><br><span class="line">hi StorageClass    guifg=#FD971F               gui=italic</span><br><span class="line">hi Structure       guifg=#66D9EF</span><br><span class="line">hi Tag             guifg=#F92672               gui=italic</span><br><span class="line">hi Title           guifg=#ef5939</span><br><span class="line">hi Todo            guifg=#FFFFFF guibg=bg      gui=bold</span><br><span class="line"></span><br><span class="line">hi Typedef         guifg=#66D9EF</span><br><span class="line">hi Type            guifg=#66D9EF               gui=none</span><br><span class="line">hi Underlined      guifg=#808080               gui=underline</span><br><span class="line"></span><br><span class="line">hi VertSplit       guifg=#808080 guibg=#080808 gui=bold</span><br><span class="line">hi VisualNOS                     guibg=#403D3D</span><br><span class="line">hi Visual                        guibg=#403D3D</span><br><span class="line">hi WarningMsg      guifg=#FFFFFF guibg=#333333 gui=bold</span><br><span class="line">hi WildMenu        guifg=#66D9EF guibg=#000000</span><br><span class="line"></span><br><span class="line">hi TabLineFill     guifg=#1B1D1E guibg=#1B1D1E</span><br><span class="line">hi TabLine         guibg=#1B1D1E guifg=#808080 gui=none</span><br><span class="line"></span><br><span class="line">if s:molokai_original == 1</span><br><span class="line">   hi Normal          guifg=#F8F8F2 guibg=#272822</span><br><span class="line">   hi Comment         guifg=#75715E</span><br><span class="line">   hi CursorLine                    guibg=#3E3D32</span><br><span class="line">   hi CursorLineNr    guifg=#FD971F               gui=none</span><br><span class="line">   hi CursorColumn                  guibg=#3E3D32</span><br><span class="line">   hi ColorColumn                   guibg=#3B3A32</span><br><span class="line">   hi LineNr          guifg=#BCBCBC guibg=#3B3A32</span><br><span class="line">   hi NonText         guifg=#75715E</span><br><span class="line">   hi SpecialKey      guifg=#75715E</span><br><span class="line">else</span><br><span class="line">   hi Normal          guifg=#F8F8F2 guibg=#1B1D1E</span><br><span class="line">   hi Comment         guifg=#7E8E91</span><br><span class="line">   hi CursorLine                    guibg=#293739</span><br><span class="line">   hi CursorLineNr    guifg=#FD971F               gui=none</span><br><span class="line">   hi CursorColumn                  guibg=#293739</span><br><span class="line">   hi ColorColumn                   guibg=#232526</span><br><span class="line">   hi LineNr          guifg=#465457 guibg=#232526</span><br><span class="line">   hi NonText         guifg=#465457</span><br><span class="line">   hi SpecialKey      guifg=#465457</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if &amp;t_Co &gt; 255</span><br><span class="line">   if s:molokai_original == 1</span><br><span class="line">      hi Normal                   ctermbg=234</span><br><span class="line">      hi CursorLine               ctermbg=235   cterm=none</span><br><span class="line">      hi CursorLineNr ctermfg=208               cterm=none</span><br><span class="line">   else</span><br><span class="line">      hi Normal       ctermfg=252 ctermbg=233</span><br><span class="line">      hi CursorLine               ctermbg=234   cterm=none</span><br><span class="line">      hi CursorLineNr ctermfg=208               cterm=none</span><br><span class="line">   endif</span><br><span class="line">   hi Boolean         ctermfg=135</span><br><span class="line">   hi Character       ctermfg=144</span><br><span class="line">   hi Number          ctermfg=135</span><br><span class="line">   hi String          ctermfg=144</span><br><span class="line">   hi Conditional     ctermfg=161               cterm=bold</span><br><span class="line">   hi Constant        ctermfg=135               cterm=bold</span><br><span class="line">   hi Cursor          ctermfg=16  ctermbg=253</span><br><span class="line">   hi Debug           ctermfg=225               cterm=bold</span><br><span class="line">   hi Define          ctermfg=81</span><br><span class="line">   hi Delimiter       ctermfg=241</span><br><span class="line"></span><br><span class="line">   hi DiffAdd                     ctermbg=24</span><br><span class="line">   hi DiffChange      ctermfg=181 ctermbg=239</span><br><span class="line">   hi DiffDelete      ctermfg=162 ctermbg=53</span><br><span class="line">   hi DiffText                    ctermbg=102 cterm=bold</span><br><span class="line"></span><br><span class="line">   hi Directory       ctermfg=118               cterm=bold</span><br><span class="line">   hi Error           ctermfg=219 ctermbg=89</span><br><span class="line">   hi ErrorMsg        ctermfg=199 ctermbg=16    cterm=bold</span><br><span class="line">   hi Exception       ctermfg=118               cterm=bold</span><br><span class="line">   hi Float           ctermfg=135</span><br><span class="line">   hi FoldColumn      ctermfg=67  ctermbg=16</span><br><span class="line">   hi Folded          ctermfg=67  ctermbg=16</span><br><span class="line">   hi Function        ctermfg=118</span><br><span class="line">   hi Identifier      ctermfg=208               cterm=none</span><br><span class="line">   hi Ignore          ctermfg=244 ctermbg=232</span><br><span class="line">   hi IncSearch       ctermfg=193 ctermbg=16</span><br><span class="line"></span><br><span class="line">   hi keyword         ctermfg=161               cterm=bold</span><br><span class="line">   hi Label           ctermfg=229               cterm=none</span><br><span class="line">   hi Macro           ctermfg=193</span><br><span class="line">   hi SpecialKey      ctermfg=81</span><br><span class="line"></span><br><span class="line">   hi MatchParen      ctermfg=233  ctermbg=208 cterm=bold</span><br><span class="line">   hi ModeMsg         ctermfg=229</span><br><span class="line">   hi MoreMsg         ctermfg=229</span><br><span class="line">   hi Operator        ctermfg=161</span><br><span class="line"></span><br><span class="line">   hi Pmenu           ctermfg=81  ctermbg=16</span><br><span class="line">   hi PmenuSel        ctermfg=255 ctermbg=242</span><br><span class="line">   hi PmenuSbar                   ctermbg=232</span><br><span class="line">   hi PmenuThumb      ctermfg=81</span><br><span class="line"></span><br><span class="line">   hi PreCondit       ctermfg=118               cterm=bold</span><br><span class="line">   hi PreProc         ctermfg=118</span><br><span class="line">   hi Question        ctermfg=81</span><br><span class="line">   hi Repeat          ctermfg=161               cterm=bold</span><br><span class="line">   hi Search          ctermfg=0   ctermbg=222   cterm=NONE</span><br><span class="line"></span><br><span class="line">   hi SignColumn      ctermfg=118 ctermbg=235</span><br><span class="line">   hi SpecialChar     ctermfg=161               cterm=bold</span><br><span class="line">   hi SpecialComment  ctermfg=245               cterm=bold</span><br><span class="line">   hi Special         ctermfg=81</span><br><span class="line">   if has(&quot;spell&quot;)</span><br><span class="line">       hi SpellBad                ctermbg=52 cterm=underline</span><br><span class="line">       hi SpellCap                ctermbg=17 cterm=underline</span><br><span class="line">       hi SpellLocal              ctermbg=17 cterm=underline</span><br><span class="line">       hi SpellRare  ctermfg=none ctermbg=none  cterm=reverse</span><br><span class="line">   endif</span><br><span class="line">   hi Statement       ctermfg=161               cterm=bold</span><br><span class="line">   hi StatusLine      ctermfg=238 ctermbg=253</span><br><span class="line">   hi StatusLineNC    ctermfg=244 ctermbg=232</span><br><span class="line">   hi StorageClass    ctermfg=208</span><br><span class="line">   hi Structure       ctermfg=81</span><br><span class="line">   hi Tag             ctermfg=161</span><br><span class="line">   hi Title           ctermfg=166</span><br><span class="line">   hi Todo            ctermfg=231 ctermbg=232   cterm=bold</span><br><span class="line"></span><br><span class="line">   hi Typedef         ctermfg=81</span><br><span class="line">   hi Type            ctermfg=81                cterm=none</span><br><span class="line">   hi Underlined      ctermfg=244               cterm=underline</span><br><span class="line"></span><br><span class="line">   hi VertSplit       ctermfg=244 ctermbg=232   cterm=bold</span><br><span class="line">   hi VisualNOS                   ctermbg=238</span><br><span class="line">   hi Visual                      ctermbg=235</span><br><span class="line">   hi WarningMsg      ctermfg=231 ctermbg=238   cterm=bold</span><br><span class="line">   hi WildMenu        ctermfg=81  ctermbg=16</span><br><span class="line"></span><br><span class="line">   hi Comment         ctermfg=59</span><br><span class="line">   hi CursorColumn                ctermbg=236</span><br><span class="line">   hi ColorColumn                 ctermbg=236</span><br><span class="line">   hi LineNr          ctermfg=250 ctermbg=236</span><br><span class="line">   hi NonText         ctermfg=59</span><br><span class="line"></span><br><span class="line">   hi SpecialKey      ctermfg=59</span><br><span class="line"></span><br><span class="line">   if exists(&quot;g:rehash256&quot;) &amp;&amp; g:rehash256 == 1</span><br><span class="line">       hi Normal       ctermfg=252 ctermbg=234</span><br><span class="line">       hi CursorLine               ctermbg=236   cterm=none</span><br><span class="line">       hi CursorLineNr ctermfg=208               cterm=none</span><br><span class="line"></span><br><span class="line">       hi Boolean         ctermfg=141</span><br><span class="line">       hi Character       ctermfg=222</span><br><span class="line">       hi Number          ctermfg=141</span><br><span class="line">       hi String          ctermfg=222</span><br><span class="line">       hi Conditional     ctermfg=197               cterm=bold</span><br><span class="line">       hi Constant        ctermfg=141               cterm=bold</span><br><span class="line"></span><br><span class="line">       hi DiffDelete      ctermfg=125 ctermbg=233</span><br><span class="line"></span><br><span class="line">       hi Directory       ctermfg=154               cterm=bold</span><br><span class="line">       hi Error           ctermfg=222 ctermbg=233</span><br><span class="line">       hi Exception       ctermfg=154               cterm=bold</span><br><span class="line">       hi Float           ctermfg=141</span><br><span class="line">       hi Function        ctermfg=154</span><br><span class="line">       hi Identifier      ctermfg=208</span><br><span class="line"></span><br><span class="line">       hi Keyword         ctermfg=197               cterm=bold</span><br><span class="line">       hi Operator        ctermfg=197</span><br><span class="line">       hi PreCondit       ctermfg=154               cterm=bold</span><br><span class="line">       hi PreProc         ctermfg=154</span><br><span class="line">       hi Repeat          ctermfg=197               cterm=bold</span><br><span class="line"></span><br><span class="line">       hi Statement       ctermfg=197               cterm=bold</span><br><span class="line">       hi Tag             ctermfg=197</span><br><span class="line">       hi Title           ctermfg=203</span><br><span class="line">       hi Visual                      ctermbg=238</span><br><span class="line"></span><br><span class="line">       hi Comment         ctermfg=244</span><br><span class="line">       hi LineNr          ctermfg=239 ctermbg=235</span><br><span class="line">       hi NonText         ctermfg=239</span><br><span class="line">       hi SpecialKey      ctermfg=239</span><br><span class="line">   endif</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">set background=dark</span><br></pre></td></tr></table></figure>

<p>修改<code>~/.vimrc</code>，增加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set nocompatible              &quot; be iMproved, required</span><br><span class="line">filetype off                  &quot; required</span><br><span class="line"></span><br><span class="line">syntax enable</span><br><span class="line">let g:solarized_termcolors=256</span><br><span class="line">set background=dark</span><br><span class="line">colorscheme molokai</span><br><span class="line"></span><br><span class="line">filetype on</span><br><span class="line">filetype indent on</span><br><span class="line">filetype plugin on</span><br><span class="line">filetype plugin indent on</span><br><span class="line"></span><br><span class="line">set listchars=tab:&gt;-,trail:-</span><br><span class="line">set list</span><br><span class="line"></span><br><span class="line">set nu</span><br><span class="line">set mouse=a</span><br><span class="line"></span><br><span class="line">set autoread</span><br><span class="line">set wildignore=*.swp,*.bak,*.pyc,*.class,.svn</span><br><span class="line">set showmatch</span><br><span class="line">set incsearch</span><br><span class="line">set smartcase</span><br><span class="line">set tabstop=8</span><br><span class="line">set hidden</span><br><span class="line">set wildmode=list:longest</span><br><span class="line">set ttyfast</span><br><span class="line"></span><br><span class="line">set encoding=utf-8</span><br><span class="line">set ffs=unix,dos,mac</span><br><span class="line">set completeopt=longest,menu</span><br><span class="line"></span><br><span class="line">let t_Co = 256</span><br><span class="line"></span><br><span class="line">let g:molokai_original = 1</span><br><span class="line">let g:rehash256 = 1</span><br><span class="line">set background=dark</span><br><span class="line"></span><br><span class="line">hi Comment	guifg=#ffff00 ctermfg=226 cterm=none</span><br><span class="line"></span><br><span class="line">autocmd FileType mail set nopaste tw=72 spell</span><br><span class="line"></span><br><span class="line">highlight clear SpellBad</span><br><span class="line">highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline</span><br><span class="line">highlight clear SpellCap</span><br><span class="line">highlight SpellCap term=underline cterm=underline</span><br><span class="line">highlight clear SpellRare</span><br><span class="line">highlight SpellRare term=underline cterm=underline</span><br><span class="line">highlight clear SpellLocal</span><br><span class="line">highlight SpellLocal term=underline cterm=underline</span><br><span class="line"></span><br><span class="line">if v:lang =~ &quot;utf8$&quot; || v:lang =~ &quot;UTF-8$&quot;</span><br><span class="line">   set fileencodings=ucs-bom,utf-8,latin1</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">set nocompatible	&quot; Use Vim defaults (much better!)</span><br><span class="line">set bs=indent,eol,start		&quot; allow backspacing over everything in insert mode</span><br><span class="line">set viminfo=&#x27;20,\&quot;50	&quot; read/write a .viminfo file, don&#x27;t store more</span><br><span class="line">			&quot; than 50 lines of registers</span><br><span class="line">set history=100</span><br><span class="line">set ruler		&quot; show the cursor position all the time</span><br><span class="line">set nu</span><br><span class="line">set hlsearch</span><br><span class="line"></span><br><span class="line">set colorcolumn=81</span><br><span class="line">set mouse=a</span><br><span class="line">set listchars=tab:&gt;-,trail:-</span><br><span class="line">set list</span><br><span class="line">set nobackup</span><br><span class="line">set noswapfile</span><br><span class="line"></span><br><span class="line">set wildignore=*.swp,*.bak,*.pyc,*.class,.svn</span><br><span class="line"></span><br><span class="line">set cursorcolumn</span><br><span class="line">set cursorline</span><br><span class="line"></span><br><span class="line">set t_ti= t_te=</span><br><span class="line"></span><br><span class="line">set title</span><br><span class="line">set novisualbell</span><br><span class="line">set noerrorbells</span><br><span class="line">set t_vb=</span><br><span class="line">set tm=500</span><br><span class="line"></span><br><span class="line">set viminfo^=%</span><br><span class="line">set ruler</span><br><span class="line">set showcmd</span><br><span class="line">set showmode</span><br><span class="line"></span><br><span class="line">set scrolloff=3</span><br><span class="line">set statusline=%&lt;%f\ %h%m%r%=%k[%&#123;(&amp;fenc==\&quot;\&quot;)?&amp;enc:&amp;fenc&#125;%&#123;(&amp;bomb?\&quot;,BOM\&quot;:\&quot;\&quot;)&#125;]\ %-14.(%l,%c%V%)\ %P</span><br><span class="line">set laststatus=2</span><br><span class="line">if has(&quot;autocmd&quot;)</span><br><span class="line">  augroup redhat</span><br><span class="line">  autocmd!</span><br><span class="line">  autocmd BufReadPost *</span><br><span class="line">  \ if line(&quot;&#x27;\&quot;&quot;) &gt; 0 &amp;&amp; line (&quot;&#x27;\&quot;&quot;) &lt;= line(&quot;$&quot;) |</span><br><span class="line">  \   exe &quot;normal! g&#x27;\&quot;&quot; |</span><br><span class="line">  \ endif</span><br><span class="line">  autocmd BufNewFile,BufReadPre /media/*,/run/media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp</span><br><span class="line">  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec</span><br><span class="line">  augroup END</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">if &amp;t_Co &gt; 2 || has(&quot;gui_running&quot;)</span><br><span class="line">  syntax on</span><br><span class="line">  set hlsearch</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">filetype plugin on</span><br><span class="line"></span><br><span class="line">if &amp;term==&quot;xterm&quot;</span><br><span class="line">     set t_Co=8</span><br><span class="line">     set t_Sb=m</span><br><span class="line">     set t_Sf=m</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">let &amp;guicursor = &amp;guicursor . &quot;,a:blinkon0&quot;</span><br><span class="line">set nomodeline</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
</search>
